#ifndef _LIBCPP_STREAMBUF_H_
#define _LIBCPP_STREAMBUF_H_
typedef int streamsize;

extern "C"
{
    #include "stdio.h"
}

namespace std
{

    template<typename _char_t, typename _traits_t>
     class basic_streambuf
    {
        public:
            typedef _char_t     char_type;
            //TODO: aus traits
            typedef int         int_type;
        
        protected:
            char_type*      _m_in_begin;
            char_type*      _m_in_current;
            char_type*      _m_in_end;
            char_type*      _m_out_begin;
            char_type*      _m_out_current;
            char_type*      _m_out_end;

        public:
            ///Virtueller Destruktor verhindert Compiler-Warnungen
            virtual ~basic_streambuf() { }
            

            ///Ein einzelnes zeichen in den Ausgabepuffer schreiben
            int_type sputc(char_type c)
            {
                int_type result;

                if(this->pptr() < this->epptr())
                {
                    *this->pptr() = c;
                    this->pbump(1);
                    result = c;
                }
                else
                {
                    //TODO: sollte overflow sein
                    result = 0;
                }

                return result;
            }
            

            ///Mehrere Zeichen in den Ausgabepuffer schreiben
            streamsize sputn(const char_type* str, streamsize size)
            {
                return xsputn(str, size);
            }
            
            ///Den Stream synchronisieren
            int pubsync() 
            {
                return sync();
            }

        protected:
            ///Konstruktor
            basic_streambuf()
                : _m_in_begin(0), _m_in_current(0), _m_in_end(0),
                 _m_out_begin(0), _m_out_current(0), _m_out_end(0)
            {}


            ///Pointer auf den Anfang des Ausgabepuffers
            char_type* pbase() const 
            { 
                return _m_out_begin; 
            }


            ///Pointer auf die aktuelle Position im Ausgabepuffer
            char_type* pptr() const 
            {
                return _m_out_current;
            }


            ///Pointer auf das Ende des Ausgabepuffers
            char_type* epptr() const 
            {
                return _m_out_end;
            }


            ///Die Schreibposition vorwaerts bewegen
            void pbump(int n)
            {
                _m_out_current += n;
            }


            ///Pointer fuer den Ausgabepuffer setzen
            void setp(char_type* pbeg, char_type* pend)
            {
                _m_out_begin = pbeg;
                _m_out_current = pbeg; 
                _m_out_end = pend;
            }
            

            ///Puffen synchronisieren (Tut in der Grundklasse nichts)
            virtual int sync()
            {
                return 0;
            }

            ///Wird nicht definiert, da angenommen wird, dass die
            ///Implementierende Klasse eine Effizientere Methode hat.
            virtual streamsize xsputn(const char_type* str, streamsize size)
            {
                puts("boehse");
                return 0;
            };
    };
} //namespace std

#endif //ifndef _LIBCPP_STREAMBUF_H_

